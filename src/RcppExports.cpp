// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sim_ppp_cn
NumericVector sim_ppp_cn(const double rate, const int n, const double t_min);
RcppExport SEXP _nhppp_sim_ppp_cn(SEXP rateSEXP, SEXP nSEXP, SEXP t_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type t_min(t_minSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ppp_cn(rate, n, t_min));
    return rcpp_result_gen;
END_RCPP
}
// sim_ppp_ct
NumericVector sim_ppp_ct(const double rate, const double t_min, const double t_max, const double tol);
RcppExport SEXP _nhppp_sim_ppp_ct(SEXP rateSEXP, SEXP t_minSEXP, SEXP t_maxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const double >::type t_min(t_minSEXP);
    Rcpp::traits::input_parameter< const double >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ppp_ct(rate, t_min, t_max, tol));
    return rcpp_result_gen;
END_RCPP
}
// big_lambda
double big_lambda(double t);
RcppExport SEXP _nhppp_big_lambda(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(big_lambda(t));
    return rcpp_result_gen;
END_RCPP
}
// big_lambda_inv
double big_lambda_inv(double z);
RcppExport SEXP _nhppp_big_lambda_inv(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(big_lambda_inv(z));
    return rcpp_result_gen;
END_RCPP
}
// add
int add(int x, int y);
RcppExport SEXP _nhppp_add(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(add(x, y));
    return rcpp_result_gen;
END_RCPP
}
// multiply
int multiply(int x, int y);
RcppExport SEXP _nhppp_multiply(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(multiply(x, y));
    return rcpp_result_gen;
END_RCPP
}
// invoke
int invoke(int x, int y, int (*func)(int, int));
RcppExport SEXP _nhppp_invoke(SEXP xSEXP, SEXP ySEXP, SEXP int)SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int (*func)(int, >::type int)(int)SEXP);
    rcpp_result_gen = Rcpp::wrap(invoke(x, y, int)));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nhppp_sim_ppp_cn", (DL_FUNC) &_nhppp_sim_ppp_cn, 3},
    {"_nhppp_sim_ppp_ct", (DL_FUNC) &_nhppp_sim_ppp_ct, 4},
    {"_nhppp_big_lambda", (DL_FUNC) &_nhppp_big_lambda, 1},
    {"_nhppp_big_lambda_inv", (DL_FUNC) &_nhppp_big_lambda_inv, 1},
    {"_nhppp_add", (DL_FUNC) &_nhppp_add, 2},
    {"_nhppp_multiply", (DL_FUNC) &_nhppp_multiply, 2},
    {"_nhppp_invoke", (DL_FUNC) &_nhppp_invoke, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_nhppp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
