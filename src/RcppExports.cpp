// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrix_cumsum_columns_inplace
void matrix_cumsum_columns_inplace(NumericMatrix& X);
RcppExport SEXP _nhppp_matrix_cumsum_columns_inplace(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    matrix_cumsum_columns_inplace(X);
    return R_NilValue;
END_RCPP
}
// matrix_diff_columns_inplace
void matrix_diff_columns_inplace(NumericMatrix& X);
RcppExport SEXP _nhppp_matrix_diff_columns_inplace(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    matrix_diff_columns_inplace(X);
    return R_NilValue;
END_RCPP
}
// vdraw_sc_step_regular
NumericMatrix vdraw_sc_step_regular(NumericMatrix& lambda, const bool is_cumulative, const NumericMatrix& range_t, const double tol, const bool atmost1);
RcppExport SEXP _nhppp_vdraw_sc_step_regular(SEXP lambdaSEXP, SEXP is_cumulativeSEXP, SEXP range_tSEXP, SEXP tolSEXP, SEXP atmost1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_cumulative(is_cumulativeSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type range_t(range_tSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type atmost1(atmost1SEXP);
    rcpp_result_gen = Rcpp::wrap(vdraw_sc_step_regular(lambda, is_cumulative, range_t, tol, atmost1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nhppp_matrix_cumsum_columns_inplace", (DL_FUNC) &_nhppp_matrix_cumsum_columns_inplace, 1},
    {"_nhppp_matrix_diff_columns_inplace", (DL_FUNC) &_nhppp_matrix_diff_columns_inplace, 1},
    {"_nhppp_vdraw_sc_step_regular", (DL_FUNC) &_nhppp_vdraw_sc_step_regular, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_nhppp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
